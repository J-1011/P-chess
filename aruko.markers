import cv2
import cv2.aruco as aruco
import numpy as np
import os
import math


# identify the markers
def idenrifyMrk(img, markerSize=6, totalaMarkers=250, draw=True):
    imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)     #change image to Grayscale
    key = getattr(aruco,f'DICT_{markerSize}X{markerSize}_{totalaMarkers}')
    arucoDict = aruco.Dictionary_get(key)
    arucoParam = aruco.DetectorParameters_create()
    bboxs, ids, rejected = aruco.detectMarkers(imgGray, arucoDict, parameters=arucoParam)


    #print(ids)
    #highlight corners of detected markers
    if draw:
        aruco.drawDetectedMarkers(img,bboxs)

#displys the id of the marker
#def displayId(bbox, id, img, drawId=True):
    #if drawId:
   # cv2.putText(img, str(id), tl, cv2.FONT_HERSHEY_PLAIN, 2, (255, 0, 255), 2)   find a way to make this work





#creating corner and the co-ordinated of the corner
#def cornersCreator(img):
 #   Gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  #  corners, ids, rejectedImgPoints = aruco.detectMarkers(Gray, aruco_dict, parameters=arucoParameters)
   # x1 = int (corners[0][0][0][0])
    #y1: int = int (corners[0][0][0][1])

    #return x1,y1

#def calculateDistance(x1,y1,x2,y2):
 #    dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)
  #   return dist
   # print(x1, y1, x2, y2)


def main():
    cap = cv2.VideoCapture(1) #defining my camera

    while True:
        sccuess, img = cap.read()
        idenrifyMrk(img)
        cv2.imshow("Image", img)
        cv2.waitKey(1)


if __name__ == "__main__":  # if true
    main()                  #execute this fuction
